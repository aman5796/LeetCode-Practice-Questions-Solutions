class Solution {
public:
    vector<vector<int>> dp;
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n==1) return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        dp.resize(2,vector<int>(n,0));
        return max(nums[0]+getMaxAmount(nums,2,true,n),getMaxAmount(nums,1,false,n));
    }
    
    int getMaxAmount(vector<int>& arr, int index, bool firstIncluded, int n) {
        if(index>=n) {
            return 0;
        }
        if(index==n-1) {
            return dp[firstIncluded][index] = (firstIncluded) ? 0 : arr[index];
        }
        if(dp[firstIncluded][index]!=0) return dp[firstIncluded][index];
        return dp[firstIncluded][index] = max(arr[index]+getMaxAmount(arr, index+2,firstIncluded,n), getMaxAmount(arr,index+1,firstIncluded,n));
    }
};