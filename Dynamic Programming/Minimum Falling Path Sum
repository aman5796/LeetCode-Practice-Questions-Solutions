class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        vector<vector<int>> minPathSum(matrix.size(),vector<int>(matrix[0].size(),0));
        for(int i=0;i<matrix.size();i++) {
            for(int j=0;j<matrix.size();j++) {
                if(i==0) {
                    minPathSum[i][j] = matrix[i][j];
                }
                else if(j==0) {
                    minPathSum[i][j] = matrix[i][j]+min(minPathSum[i-1][j],minPathSum[i-1][j+1]);
                }
                else if(j==matrix.size()-1) {
                    minPathSum[i][j] = matrix[i][j]+min(minPathSum[i-1][j],minPathSum[i-1][j-1]);
                }
                else {
                    minPathSum[i][j] = matrix[i][j]+min({minPathSum[i-1][j],minPathSum[i-1][j+1],minPathSum[i-1][j-1]});
                }
            }
        }
        return *min_element(minPathSum[matrix.size()-1].begin(),minPathSum[matrix.size()-1].end());
    }
};