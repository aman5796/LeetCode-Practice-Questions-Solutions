class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int indexOfZero = accumulate(nums.begin(),nums.end(),0);
        indexOfZero += abs(target);
        vector<vector<int>> dp(nums.size(),vector<int>((2*indexOfZero)+1,0));
        return numWays(nums,target,0,dp,indexOfZero);
    }
    
    int numWays(vector<int>& arr, int n, int index, vector<vector<int>>& dp, int indexOfZero) {
        if(n==0 && index>=arr.size()) {
            return 1;
        }
        else if(n!=0 && index>=arr.size()) {
            return 0;
        }
        if(dp[index][indexOfZero+n]!=0) {
            return dp[index][indexOfZero+n];
        }
        return dp[index][indexOfZero+n] = numWays(arr,n+arr[index],index+1,dp,indexOfZero)+numWays(arr,n-arr[index],index+1,dp,indexOfZero);
    }
};