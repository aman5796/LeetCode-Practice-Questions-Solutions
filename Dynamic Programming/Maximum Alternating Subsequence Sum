class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        if(nums.size()==1) return (long long)nums[0];
        vector<vector<long long>> dp(nums.size()+1,vector<long long>(2,0));
        // return mas(nums,0,1, dp);
        dp[0][0] = dp[0][1] = 0;
        for(int i=1;i<=nums.size();i++) {
            dp[i][0] = max(dp[i-1][1]+nums[i-1], dp[i-1][0]);
            dp[i][1] = max(dp[i-1][0]-nums[i-1], dp[i-1][1]);
        }
        return max(dp.back()[0], dp.back()[1]);
    }
    
    // Memoized code is below
    // long long mas(vector<int>& arr, int indx, int isEven, vector<vector<long long>> &dp) {
    //     if(indx>=arr.size()) {
    //         return 0;
    //     }
    //     if(dp[indx][isEven]!=0) {
    //         return dp[indx][isEven];
    //     }
    //     long long pick=0, notPick=0;
    //     pick = mas(arr,indx+1,!isEven,dp) + ((isEven==1)?arr[indx]:(-arr[indx]));
    //     notPick = mas(arr,indx+1,isEven,dp);
    //     return dp[indx][isEven] = max(pick, notPick);
    // }
};