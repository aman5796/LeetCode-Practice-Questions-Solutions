class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int rows = heightMap.size();
        int cols = heightMap[0].size();
       if(rows<3 || cols<3) return 0; priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
        vector<vector<bool>> vis(rows,vector<bool>(cols,false));
        for(int i=0;i<rows;i++) {
            for(int j=0;j<cols;j++) {
                if(!(i==0 || j==0 || i==rows-1 || j==cols-1)) {
                    continue;
                }
                vis[i][j] = true;
                pq.push({heightMap[i][j],{i,j}});
            }
        }
        int ans = 0;
        int maxHt = INT_MIN;
        vector<int> dir = {0,1,0,-1,0};
        while(!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            maxHt = max(maxHt,top.first);
            int x = top.second.first;
            int y = top.second.second;
            for(int i=0;i<4;i++) {
                int _x = x+dir[i];
                int _y = y+dir[i+1];
                if(_x<0 || _x>=rows || _y<0 || _y>=cols || vis[_x][_y]) {
                    continue;
                }
                vis[_x][_y] = true;
                if(maxHt>heightMap[_x][_y]) {
                    ans += maxHt-heightMap[_x][_y];
                }
                pq.push({heightMap[_x][_y],{_x,_y}});
            }
        }
        return ans;
    }
};