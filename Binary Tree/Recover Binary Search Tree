/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> inorder;
    void recoverTree(TreeNode* root) {
        if(root==NULL) {
            return;
        }
        fixTree(root);
        int j=-1,k=-1;
        for(int i=0;i<inorder.size();i++) {
            if(j==-1 && inorder[i]->val>=inorder[i+1]->val) {
                j = i;
                continue;
            }
            if(j!=-1 && inorder[i]->val<inorder[j]->val) {
                k = i;
            }
        }
        int temp = inorder[j]->val;
        inorder[j]->val = inorder[k]->val;
        inorder[k]->val = temp;
    }
    
    void fixTree(TreeNode* root) {
        if(root==NULL) {
            return;
        }
        fixTree(root->left);
        inorder.push_back(root);
        fixTree(root->right);
    }
};