/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res="";
        if(root!=NULL) {
            queue<TreeNode*> q;
            q.push(root);
            while(!q.empty()) {
                int len = q.size();
                for(int i=0;i<len;i++) {
                    if(q.front()==NULL) {
                        res += "N ";
                    }
                    else {
                        res += to_string(q.front()->val)+' ';
                        q.push(q.front()->left);
                        q.push(q.front()->right);
                    }
                    q.pop();
                }
            }
        }
        return (root!=NULL)?res:"";
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0) {
            return NULL;
        }
        stringstream s(data);
        string str;
        getline(s,str,' ');
        TreeNode* root = new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            getline(s,str,' ');
            if(str=="N") {
                node->left=NULL;
            }
            else {
                TreeNode* leftNode = new TreeNode(stoi(str));
                node->left = leftNode;
                q.push(leftNode);
            }
            getline(s,str,' ');
            if(str=="N") {
                node->right = NULL;
            }
            else {
                TreeNode* rightNode = new TreeNode(stoi(str));
                node->right = rightNode;
                q.push(rightNode);
            }
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));