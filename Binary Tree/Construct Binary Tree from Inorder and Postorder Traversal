/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int processed;
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()==0) {
            return NULL;
        }
        processed = inorder.size()-1;
        return generateTree(inorder, postorder, 0, inorder.size()-1);
    }
    
    TreeNode* generateTree(vector<int>& in, vector<int>& post, int start, int end) {
        if(start>end) {
            return NULL;
        }
        int indx;
        for(int i=start;i<=end;i++) {
            if(in[i]==post[processed]) {
                indx = i;
                break;
            }
        }
        TreeNode* root = new TreeNode(post[processed]);
        processed--;
        root->right = generateTree(in,post,indx+1,end);
        root->left = generateTree(in,post,start,indx-1);
        return root;
    }
};