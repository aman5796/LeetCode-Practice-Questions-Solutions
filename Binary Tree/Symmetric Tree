/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL) {
            return true;
        }
        queue<TreeNode*> leftQueue;
        queue<TreeNode*> rightQueue;
        leftQueue.push(root);
        rightQueue.push(root);
        while(!leftQueue.empty() && !rightQueue.empty()) {
            if(leftQueue.front()->val!=rightQueue.front()->val) {
                return false;
            }
            if(leftQueue.front()->left!=NULL && rightQueue.front()->right!=NULL) {
                leftQueue.push(leftQueue.front()->left);
                rightQueue.push(rightQueue.front()->right);
            }
            else {
                if(leftQueue.front()->left!=NULL || rightQueue.front()->right!=NULL) return false;
            }
            if(leftQueue.front()->right!=NULL && rightQueue.front()->left!=NULL) {
                leftQueue.push(leftQueue.front()->right);
                rightQueue.push(rightQueue.front()->left);
            }
            else {
                if(leftQueue.front()->right!=NULL && rightQueue.front()->left!=NULL) return false;
            }
            leftQueue.pop();
            rightQueue.pop();
        }
        return true;
    }
};