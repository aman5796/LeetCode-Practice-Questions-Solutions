class Solution {
public:
    int index;
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<pair<int,int>> soilderNum;
        int columns = mat[0].size();
        for(int i=0; i<mat.size(); i++) {
            index = INT_MAX;
            int zeroIndex = firstZeroIndex(mat[i], 0 , columns-1);
            if(zeroIndex != INT_MAX) {
                soilderNum.push_back(make_pair(zeroIndex, i));
            } else{
                soilderNum.push_back(make_pair(columns, i));
            }
        }
        sort(soilderNum.begin(),soilderNum.end());
        vector<int> weakRows;
        for(int i; i<k; i++) {
            weakRows.push_back(soilderNum[i].second);
        }
        soilderNum.clear();
        return weakRows;
        
    }
    int firstZeroIndex(vector<int> arr, int left, int right) {
        if(left>right || right<left) {
            return index;
        }
        int mid = (left+right)/2;
        if(arr[mid]==0 && mid<index) {
            index = mid;
            firstZeroIndex(arr, left, mid-1);
        }
        else if(arr[mid!=0]) {
            firstZeroIndex(arr, mid+1, right);
        }
        return index;
    }
};