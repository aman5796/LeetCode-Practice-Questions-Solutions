class Solution {
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        vector<int> color(n,0);
        unordered_map<int,vector<int>> graph;
        for(int i=0;i<dislikes.size();i++) {
            graph[dislikes[i][0]].push_back(dislikes[i][1]);
        }
        queue<int> q;
        q.push(1);
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            if(color[node-1]==0) {
                for(int i: graph[node]) {
                    if(color[i-1]!=0) {
                        color[node-1] = -color[i-1];
                        break;
                    }
                }
                if(color[node-1]==0) color[node-1]=1;
            }
            for(int i: graph[node]) {
                if(color[i-1]==color[node-1]) {
                    return false;
                }
                else if(color[i-1]==0) {
                    color[i-1] = -color[node-1];
                    q.push(i);
                }
            }
            if(q.empty()) {
                for(int i=0;i<n;i++) {
                    if(color[i]==0) {
                        q.push(i+1);
                        break;
                    }
                }
            }
        }
        return true;
    }
};