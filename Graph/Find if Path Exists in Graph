class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if(n==1) {
            return true;
        }
        unordered_map<int,vector<int>> graph;
        for(auto e: edges) {
            if(graph.find(e[0])==graph.end()) {
                graph[e[0]] = {e[1]};
            } else {
                graph[e[0]].push_back(e[1]);
            }
            if(graph.find(e[1])==graph.end()) {
                graph[e[1]] = {e[0]};
            } else {
                graph[e[1]].push_back(e[0]);
            }
        }
        vector<bool> visited(n,false);
        stack<int> s;
        s.push(source);
        visited[source] = true;
        while(!s.empty()) {
            int top = s.top();
            s.pop();
            for(auto node: graph[top]) {
                if(node==destination) {
                    return true;
                }
                if(!visited[node]) {
                    s.push(node);
                    visited[node] = true;
                }
            }
        }
        return false;
    }
};