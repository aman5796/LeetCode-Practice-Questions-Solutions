class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> words;
        for(auto str: wordList) {
            words.insert(str);
        }
        queue<string> q;
        q.push(beginWord);
        int depth = 0;
        while(!q.empty()) {
            depth++;
            int size = q.size();
            while(size--) {
                string curStr = q.front();
                q.pop();
                if(curStr==endWord) {
                    return depth;
                }
                for(int i=0;i<curStr.length();i++) {
                    string tempStr = curStr;
                    for(char c='a';c<='z';c++) {
                        tempStr[i] = c;
                        if(tempStr==curStr) {
                            continue;
                        }
                        if(words.find(tempStr)!=words.end()) {
                            q.push(tempStr);
                            words.erase(tempStr);
                        }
                    }
                }
                words.erase(curStr);
            }
        }
        return 0;
    }
};