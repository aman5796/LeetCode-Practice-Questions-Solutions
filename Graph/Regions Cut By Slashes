class Solution {
public:
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        vector<int> parent(4*n*n);
        for(int i=0;i<(4*n*n);i++) {
            parent[i] = i;
        }
        int indx = -1;
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                indx = 4*((i*n)+j);
                if(grid[i][j]=='/') {
                    merge(parent,indx+0,indx+3);
                    merge(parent,indx+1,indx+2);
                } 
                else if(grid[i][j]=='\\') {
                    merge(parent,indx+0,indx+1);
                    merge(parent,indx+2,indx+3);
                }
                else if(grid[i][j]==' ') {
                    merge(parent,indx+0,indx+1);
                    merge(parent,indx+2,indx+3);
                    merge(parent,indx+2,indx+1);
                }
                if(i+1<n) {
                    merge(parent,indx+2,indx+4*n+0);
                }
                if(j+1<n) {
                    merge(parent,indx+1,indx+4+3);
                }
            }
        }
        int res = 0;
        for(int i=0;i<parent.size();i++) {
            if(parent[i]==i) {
                res++;
            }
        }
        return res;
    }
    
    int find(vector<int> &parent, int n) {
        if(parent[n]!=n) {
            return find(parent,parent[n]);
        }
        return n;
    }
    
    void merge(vector<int> &parent, int a, int b) {
        if(find(parent,a)!=find(parent,b)) {
            parent[find(parent,a)] = find(parent,b);
        }
    }
};