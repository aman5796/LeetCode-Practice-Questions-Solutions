class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        vector<int> parent(graph.size()+1);
        for(int i=0;i<=graph.size();i++) {
            parent[i] = i;
        }
        for(int i=0;i<graph.size();i++) {
            for(int j=i+1;j<graph[0].size();j++) {
                if(graph[i][j]==1) {
                    _union(parent,i,j);
                }
            }
        }
        vector<int> malware(graph.size()+1,0);
        vector<int> degree(graph.size()+1,0);
        for(int i=0;i<=graph.size();i++) {
            degree[find(parent,i)]++;
        }
        for(int num: initial) {
            malware[find(parent,num)]++;
        }
        vector<int> ans = {1,0};
        for(int num: initial) {
            ans = min(ans,{((malware[find(parent,num)]==1)*(-degree[find(parent,num)])),num});
        }
        return ans[1];
    }
    
    int find(vector<int> &parent, int a) {
        if(parent[a]!=a) {
            parent[a] = find(parent,parent[a]);
        }
        return parent[a];
    }
    
    void _union(vector<int> &parent, int a, int b) {
        if(find(parent,a)!=find(parent,b)) {
            parent[find(parent,a)] = find(parent,b);
        }
    }
};