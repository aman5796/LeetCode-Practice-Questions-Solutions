class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<vector<int>> q;
        int fresh = 0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[0].size();j++) {
                if(grid[i][j]==2) {
                    q.push({i,j});
                }
                else if(grid[i][j]==1) {
                    fresh++;
                }
            }
        }
        int time=0;
        int rotten = 0;
        vector<vector<int>> dir = {{1,0},{-1,0},{0,1},{0,-1}};
        while(!q.empty()) {
            int n = q.size();
            time++;
            while(n--) {
                auto cur = q.front();
                q.pop();
                for(int i=0;i<4;i++) {
                    int x = cur[0]+dir[i][0];
                    int y = cur[1]+dir[i][1];
                    if(x>=0 && y>=0 && x<grid.size() && y<grid[0].size() && grid[x][y]==1) {
                        q.push({x,y});
                        grid[x][y]=2;
                        rotten++;
                    }
                }
            }
        }
        return (rotten==fresh && fresh!=0)?time-1:(fresh==0)?0:-1;
    }
};