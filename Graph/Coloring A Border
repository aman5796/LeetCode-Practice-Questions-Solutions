class Solution {
public:
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int row, int col, int color) {
        vector<vector<int>> arr = grid;
        dfs(arr,row,col,grid[row][col]);
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[0].size();j++) {
                if(i==0 || j==0 || i==grid.size()-1 || j==grid[0].size()-1) {
                    if(arr[i][j]==INT_MAX) {
                        grid[i][j] = color;
                    }
                }
                else {
                    if((arr[i][j]==INT_MAX) and (arr[i-1][j]!=INT_MAX || arr[i][j+1]!=INT_MAX || arr[i+1][j]!=INT_MAX || arr[i][j-1]!=INT_MAX)) {
                        grid[i][j]=color;
                    }
                }
            }
        }
        return grid;
    }
    
    void dfs(vector<vector<int>> &arr, int i, int j, int clr) {
        if(i<0 ||j<0 || i>=arr.size() || j>=arr[0].size() || arr[i][j]!=clr) {
            return;
        }
        arr[i][j] = INT_MAX;
        dfs(arr,i+1,j,clr);
        dfs(arr,i-1,j,clr);
        dfs(arr,i,j+1,clr);
        dfs(arr,i,j-1,clr);
    }
};