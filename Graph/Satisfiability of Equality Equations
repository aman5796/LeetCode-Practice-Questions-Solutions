class Solution {
public:
    bool equationsPossible(vector<string>& equations) {
        vector<int> parent(26);
        for(int i=0;i<26;i++) {
            parent[i] = i;
        }
        for(string eq: equations) {
            if(eq[1]=='=') {
                _union(parent,eq[0]-'a',eq[3]-'a');
            }
        }
        for(string eq: equations) {
            if(eq[1]=='!') {
                if(find(parent,eq[0]-'a')==find(parent,eq[3]-'a')) {
                    return false;
                }
            }
        }
        return true;
    }
    
    int find(vector<int> &parent, int a) {
        if(parent[a]!=a) {
            return find(parent,parent[a]);
        }
        return a;
    }
    
    void _union(vector<int> &parent, int a, int b) {
        if(find(parent,a)!=find(parent,b)) {
            parent[find(parent,a)] = find(parent,b);
        }
    }
};