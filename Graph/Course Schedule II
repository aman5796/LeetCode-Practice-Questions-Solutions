class Solution {
public:
    vector<int> res;
    vector<int> findOrder(int N, vector<vector<int>>& prerequisites) {
        unordered_map<int,vector<int>> graph;
        vector<int> visited(N,0); //0->unv 1->vis 2->unexp
        for(auto edge: prerequisites) {
            graph[edge[0]].push_back(edge[1]);
        }
        for(int i=0;i<N;i++) {
            if(visited[i]==0) {
                if(!dfs(graph,i,visited)) {
                    return {};
                }
            }
        }
        return res;
    }
    
    bool dfs(unordered_map<int,vector<int>> &graph, int node, vector<int> &visited) {
        visited[node] = 2;
        for(auto v: graph[node]) {
            if(visited[v]==0) {
                if(!dfs(graph,v,visited)) {
                    return false;
                }
            } else if(visited[v]==2){
                //loop
                return false;
            }
        }
        visited[node] = 1;
        res.push_back(node);
        return true;
    }
};