class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int,vector<pair<int,int>>> graph;
        for(int i=0;i<times.size();i++) {
            graph[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        vector<int> cost(n+1,INT_MAX);
        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>> pq;
        cost[k] = 0;
        pq.push({0,k});
        while(!pq.empty()) {
            pair<int,int> node = pq.top();
            pq.pop();
            for(int i=0;i<graph[node.second].size();i++) {
                if(cost[graph[node.second][i].first]==INT_MAX) {
                    cost[graph[node.second][i].first] = node.first+graph[node.second][i].second;
                    pq.push({cost[graph[node.second][i].first],graph[node.second][i].first});
                }
                else {
                    if(cost[graph[node.second][i].first]>node.first+graph[node.second][i].second) {
                        cost[graph[node.second][i].first] = node.first+graph[node.second][i].second;
                        pq.push({cost[graph[node.second][i].first],graph[node.second][i].first});
                        
                    }
                }
            }
        }
        int ans = INT_MIN;
        for(int i=1;i<=n;i++) {
            if(cost[i]==INT_MAX) {
                return -1;
            }
            ans = max(ans,cost[i]);
        }
        return ans;
    }
};