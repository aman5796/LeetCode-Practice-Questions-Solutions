/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL && l2==NULL) {
            return NULL;
        }
        ListNode* res = NULL;
        ListNode* head = NULL;
        while(l1!=NULL && l2!=NULL) {
            if(l1->val<=l2->val) {
                if(res==NULL) {
                    res = l1;
                    head = res;
                }
                else {
                    res->next = l1; 
                    res = res->next;
                }
                l1 = l1->next;
            }
            else {
                if(res==NULL) {
                    res = l2;
                    head = res;
                }
                else {
                    res->next = l2; 
                    res = res->next;
                }
                l2 = l2->next;
            }
        }
        while(l1!=NULL) {
            if(res==NULL) {
                res = l1;
                head = res;
            } else {
                res->next = l1;
                res = res->next;
            }
            l1 = l1->next;
        }
        while(l2!=NULL) {
            if(res==NULL) {
                res = l2;
                head = res;
            } else {
                res->next = l2;
                res = res->next;
            }
            l2 = l2->next;
        }
        return head;
    }
};