class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        vector<vector<int>> arr(row,vector<int>(col,0));
        for(int i=0;i<row;i++) {
            for(int j=0;j<col;j++) {
                if(i==0) {
                    arr[i][j] = (matrix[i][j]=='1')?1:0;
                }
                else if(matrix[i][j]=='1') {
                    arr[i][j] = arr[i-1][j]+1;
                } else {
                    arr[i][j] = 0;
                }
            }
        }
        int ans = INT_MIN;
        for(int i=0;i<row;i++) {
            ans = max(ans,maxAreaRectangle(arr[i],col));
        }
        return ans;
    }
    
    int maxAreaRectangle(vector<int>& arr, int n) {
        vector<int> nsl(n,0);
        vector<int> nsr(n,0);
        stack<pair<int,int>> st;
        for(int i=0;i<n;i++) {
            while(!st.empty() && st.top().first>=arr[i]) {
                st.pop();
            }
            if(st.empty()) {
                nsl[i] = 0;
            }
            else {
                nsl[i] = st.top().second+1;
            }
            st.push({arr[i],i});
        }
        while(!st.empty()) st.pop();
        for(int i=n-1;i>=0;i--) {
            while(!st.empty() && st.top().first>=arr[i]) {
                st.pop();
            }
            if(st.empty()) {
                nsr[i] = n-1;
            }
            else {
                nsr[i] = st.top().second-1;
            }
            st.push({arr[i],i});
        }
        int ans = INT_MIN;
        for(int i=0;i<n;i++) {
            ans = max(ans,arr[i]*(nsr[i]-nsl[i]+1));
        }
        return ans;
    }
};