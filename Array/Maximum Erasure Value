class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int left=0;
        int maxSum=0;
        vector<int> sum(nums.size(),0);
        unordered_map<int,int> hmap;
        for(int i=0;i<nums.size();i++) {
            sum[i] += nums[i]+((i==0)?0:sum[i-1]);
            if(hmap.find(nums[i])==hmap.end()) {
                hmap[nums[i]] = i;
                if(i==nums.size()-1) {
                    maxSum = max(maxSum,sum[i]-((left==0)?0:sum[left-1]));
                }
            }
            else {
                cout<<i<<" ";
                if(hmap[nums[i]]>=left) {
                    maxSum = max(maxSum,sum[i-1]-((left==0)?0:sum[left-1]));
                    left = hmap[nums[i]]+1;
                }
                hmap[nums[i]] = i;
                if(i==nums.size()-1) {
                    maxSum = max(maxSum,sum[i]-((left==0)?0:sum[left-1]));
                }
            }
        }
        return maxSum;
    }
};