class Solution {
public:
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
    
    int mergeSort(vector<int>& arr, int l, int r) {
        if(l>=r) {
            return 0;
        }
        int mid = (l+r)/2;
        int ans = mergeSort(arr,l,mid);
        ans += mergeSort(arr,mid+1,r);
        ans += merge(arr,l,r,mid);
        return ans;
    }
    
    int merge(vector<int>& arr, int l, int r, int mid) {
        vector<int> temp;
        int cnt = 0;
        int j = mid+1;
        for(int i=l;i<=mid;i++) {
            while(j<=r && arr[i]>2LL*arr[j]) {
                j++;
            }
            cnt += (j-(mid+1));
        }
        int left=l, right=mid+1;
        while(left<=mid && right<=r) {
            if(arr[left]<=arr[right]) {
                temp.push_back(arr[left++]);
            }
            else {
                temp.push_back(arr[right++]);
            }
        }
        while(left<=mid) {
            temp.push_back(arr[left++]);
        }
        while(right<=r) {
            temp.push_back(arr[right++]);
        }
        for(int i=l;i<=r;i++) {
            arr[i] = temp[i-l];
        }
        return cnt;
    }
    
};